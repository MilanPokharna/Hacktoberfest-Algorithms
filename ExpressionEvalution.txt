
// CPP program to evaluate a prefix expression. 
#include <bits/stdc++.h> 
using namespace std; 
  
bool isOperand(char c) 
{ 
    // If the character is a digit then it must 
    // be an operand 
    return isdigit(c); 
} 
  
double evaluatePrefix(string exprsn) 
{ 
    stack<double> Stack; 
  
    for (int j = exprsn.size() - 1; j >= 0; j--) { 
  
        // Push operand to Stack 
        // To convert exprsn[j] to digit subtract 
        // '0' from exprsn[j]. 
        if (isOperand(exprsn[j])) 
            Stack.push(exprsn[j] - '0'); 
  
        else { 
  
            // Operator encountered 
            // Pop two elements from Stack 
            double o1 = Stack.top(); 
            Stack.pop(); 
            double o2 = Stack.top(); 
            Stack.pop(); 
  
            // Use switch case to operate on o1 
            // and o2 and perform o1 O o2. 
            switch (exprsn[j]) { 
            case '+': 
                Stack.push(o1 + o2); 
                break; 
            case '-': 
                Stack.push(o1 - o2); 
                break; 
            case '*': 
                Stack.push(o1 * o2); 
                break; 
            case '/': 
                Stack.push(o1 / o2); 
                break; 
            } 
        } 
    } 
  
    return Stack.top(); 
} 
  
// Driver code 
int main() 
{ 
    string exprsn = "+9*26"; 
    cout << evaluatePrefix(exprsn) << endl; 
    return 0; 
} 


//

// C++ program to evaluate value of a postfix expression 
#include <iostream> 
#include <string.h> 

using namespace std; 

// Stack type 
struct Stack 
{ 
    int top; 
    unsigned capacity; 
    int* array; 
}; 

// Stack Operations 
struct Stack* createStack( unsigned capacity ) 
{ 
    struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack)); 

    if (!stack) return NULL; 

    stack->top = -1; 
    stack->capacity = capacity; 
    stack->array = (int*) malloc(stack->capacity * sizeof(int)); 

    if (!stack->array) return NULL; 

    return stack; 
} 

int isEmpty(struct Stack* stack) 
{ 
    return stack->top == -1 ; 
} 

char peek(struct Stack* stack) 
{ 
    return stack->array[stack->top]; 
} 

char pop(struct Stack* stack) 
{ 
    if (!isEmpty(stack)) 
        return stack->array[stack->top--] ; 
    return '$'; 
} 

void push(struct Stack* stack, char op) 
{ 
    stack->array[++stack->top] = op; 
} 


// The main function that returns value of a given postfix expression 
int evaluatePostfix(char* exp) 
{ 
    // Create a stack of capacity equal to expression size 
    struct Stack* stack = createStack(strlen(exp)); 
    int i; 

    // See if stack was created successfully 
    if (!stack) return -1; 

    // Scan all characters one by one 
    for (i = 0; exp[i]; ++i) 
    { 
        // If the scanned character is an operand (number here), 
        // push it to the stack. 
        if (isdigit(exp[i])) 
            push(stack, exp[i] - '0'); 

        // If the scanned character is an operator, pop two 
        // elements from stack apply the operator 
        else
        { 
            int val1 = pop(stack); 
            int val2 = pop(stack); 
            switch (exp[i]) 
            { 
            case '+': push(stack, val2 + val1); break; 
            case '-': push(stack, val2 - val1); break; 
            case '*': push(stack, val2 * val1); break; 
            case '/': push(stack, val2/val1); break; 
            } 
        } 
    } 
    return pop(stack); 
} 

// Driver program to test above functions 
int main() 
{ 
    char exp[] = "231*+9-"; 
    cout<<"postfix evaluation: "<< evaluatePostfix(exp); 
    return 0; 
} 

///



// CPP program to evaluate a given 
// expression where tokens are 
// separated by space. 
#include <bits/stdc++.h> 
using namespace std; 

// Function to find precedence of 
// operators. 
int precedence(char op){ 
    if(op == '+'||op == '-') 
    return 1; 
    if(op == '*'||op == '/') 
    return 2; 
    return 0; 
} 

// Function to perform arithmetic operations. 
int applyOp(int a, int b, char op){ 
    switch(op){ 
        case '+': return a + b; 
        case '-': return a - b; 
        case '*': return a * b; 
        case '/': return a / b; 
    } 
} 

// Function that returns value of 
// expression after evaluation. 
int evaluate(string tokens){ 
    int i; 
    
    // stack to store integer values. 
    stack <int> values; 
    
    // stack to store operators. 
    stack <char> ops; 
    
    for(i = 0; i < tokens.length(); i++){ 
        
        // Current token is a whitespace, 
        // skip it. 
        if(tokens[i] == ' ') 
            continue; 
        
        // Current token is an opening 
        // brace, push it to 'ops' 
        else if(tokens[i] == '('){ 
            ops.push(tokens[i]); 
        } 
        
        // Current token is a number, push 
        // it to stack for numbers. 
        else if(isdigit(tokens[i])){ 
            int val = 0; 
            
            // There may be more than one 
            // digits in number. 
            while(i < tokens.length() && 
                        isdigit(tokens[i])) 
            { 
                val = (val*10) + (tokens[i]-'0'); 
                i++; 
            } 
            
            values.push(val); 
        } 
        
        // Closing brace encountered, solve 
        // entire brace. 
        else if(tokens[i] == ')') 
        { 
            while(!ops.empty() && ops.top() != '(') 
            { 
                int val2 = values.top(); 
                values.pop(); 
                
                int val1 = values.top(); 
                values.pop(); 
                
                char op = ops.top(); 
                ops.pop(); 
                
                values.push(applyOp(val1, val2, op)); 
            } 
            
            // pop opening brace. 
            ops.pop(); 
        } 
        
        // Current token is an operator. 
        else
        { 
            // While top of 'ops' has same or greater 
            // precedence to current token, which 
            // is an operator. Apply operator on top 
            // of 'ops' to top two elements in values stack. 
            while(!ops.empty() && precedence(ops.top()) 
                                >= precedence(tokens[i])){ 
                int val2 = values.top(); 
                values.pop(); 
                
                int val1 = values.top(); 
                values.pop(); 
                
                char op = ops.top(); 
                ops.pop(); 
                
                values.push(applyOp(val1, val2, op)); 
            } 
            
            // Push current token to 'ops'. 
            ops.push(tokens[i]); 
        } 
    } 
    
    // Entire expression has been parsed at this 
    // point, apply remaining ops to remaining 
    // values. 
    while(!ops.empty()){ 
        int val2 = values.top(); 
        values.pop(); 
                
        int val1 = values.top(); 
        values.pop(); 
                
        char op = ops.top(); 
        ops.pop(); 
                
        values.push(applyOp(val1, val2, op)); 
    } 
    
    // Top of 'values' contains result, return it. 
    return values.top(); 
} 

int main() { 
    cout << evaluate("10 + 2 * 6") << "\n"; 
    cout << evaluate("100 * 2 + 12") << "\n"; 
    cout << evaluate("100 * ( 2 + 12 )") << "\n"; 
    cout << evaluate("100 * ( 2 + 12 ) / 14"); 
    return 0; 
} 

// This code is contributed by Nikhil jindal. 


////////////////////////////////////////////////////////////////////////////////////

// Area of a circle in C programming

#include <stdio.h>
#include <math.h>

float area_of_a_circle(float radius)
{
return M_PI * radius * radius;
}
int main()
{
float area, radius;
printf(“\nEnter the radius of the circle : “);
scanf(“%f”, &radius);
area = area_of_a_circle(radius);
printf(“\nArea of the circle : %f\n”, area);
return 0;



////////////////////////////////////////////////////////////////////////////////


/ C program to convert a number from decimal to octal

#include <stdio.h>
#include <math.h>

int decimal_to_octal(int decimal);
int main()
{
int decimal;

printf(“\nEnter a decimal number: “);
scanf(“%d”, &decimal);

printf(“\nEquivalent octal number : %d\n”, decimal_to_octal(decimal));

return 0;
}

int decimal_to_octal(int decimal)
{
int octal = 0, i = 1;

while (decimal != 0)
{
octal += (decimal % 8) * i;
decimal /= 8;
i *= 10;
}

return octal;
}



//////////////////////////////////////////////////////////////////////////////////

// C program to convert a number from octal to decimal

#include
#include

long int octal_to_decimal(int octal)
{
int decimal = 0, i = 0;

while(octal != 0)
{
decimal += (octal%10) * pow(8,i); // multiplying with powers of 8
++i;
octal/=10;  // Divide by 10 to make it as decimal
}

i = 1;

return decimal;
}

int main()
{
int octal;

printf(“\nEnter an octal number: “);
scanf(“%d”, &octal);

printf(“\nDecimal Equivalent : %d\n”,octal_to_decimal(octal));

return 0;
}



    